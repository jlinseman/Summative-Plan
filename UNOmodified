import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class mainClass {

	static String discardPile = null;
	static int cardChoice = 0;

	static // Boolean
	Boolean nobodyWon = true;

	static int discardPileCardNumber = 0;

	static // Character Info
	String playerName;
	static int playerDeckAmount = 7;
	static String[] playerDeck = new String[playerDeckAmount];

	static // Computer Info
	String computerName = "Bob";
	static int computerDeckAmount = 7;
	static String[] computerDeck = new String[computerDeckAmount];

	// Scanner method used to obtain info from user
	static Scanner input = new Scanner(System.in);

	static Random rand = new Random();

	// Array that holds all card options
	static String[] strings = { "Red 1", "Red 2", "Red 3", "Red 4", "Red 5", "Red 6", "Red 7", "Red 8", "Red 9",
			"Red Draw Two", "Red Skip", "Red Reverse", "Red 1", "Red 2", "Red 3", "Red 4", "Red 5", "Red 6", "Red 7",
			"Red 8", "Red 9", "Red Draw Two", "Red Skip", "Red Reverse", "Blue 1", "Blue 2", "Blue 3", "Blue 4",
			"Blue 5", "Blue 6", "Blue 7", "Blue 8", "Blue 9", "Blue Draw Two", "Blue Skip", "Blue Reverse", "Blue 1",
			"Blue 2", "Blue 3", "Blue 4", "Blue 5", "Blue 6", "Blue 7", "Blue 8", "Blue 9", "Blue Draw Two",
			"Blue Skip", "Blue Reverse", "Green 1", "Green 2", "Green 3", "Green 4", "Green 5", "Green 6", "Green 7",
			"Green 8", "Green 9", "Green Draw Two", "Green Skip", "Green Reverse", "Green 1", "Green 2", "Green 3",
			"Green 4", "Green 5", "Green 6", "Green 7", "Green 8", "Green 9", "Green Draw Two", "Green Skip",
			"Green Reverse", "Yellow 1", "Yellow 2", "Yellow 3", "Yellow 4", "Yellow 5", "Yellow 6", "Yellow 7",
			"Yellow 8", "Yellow 9", "Yellow Draw Two", "Yellow Skip", "Yellow Reverse", "Yellow 1", "Yellow 2",
			"Yellow 3", "Yellow 4", "Yellow 5", "Yellow 6", "Yellow 7", "Yellow 8", "Yellow 9", "Yellow Draw Two",
			"Yellow Skip", "Yellow Reverse", "Wild Card", "Wild Card", "Wild Card Four", "Wild Card Four" };

	// Main Method
	public static void main(String args[]) {

		do {
			// Calls method to introduce the program to the user
			introduceProgramToUser();

			// Gives both users a randomly generated hand
			randomizeDecks();

			runGame();

		} while (nobodyWon);

	}

	public static void introduceProgramToUser() {
		// This part introduces the program and allows for the character to
		// enter their name;
		System.out.println("\t\tWELCOME TO UNO!");
		System.out.println();
		System.out.print("Name: ");
		playerName = input.next();

		// This section introduces the opponent
		clearScreen();

	}

	public static void randomizeDecks() {

		// Randomize the player deck
		for (int i = 0; i < playerDeck.length; i++) {

			playerDeck[i] = strings[getRandomNumber(99)];
		}

		// Randomize the computer deck
		for (int i = 0; i < computerDeck.length; i++) {

			computerDeck[i] = strings[getRandomNumber(99)];
		}

		discardPile = strings[getRandomNumber(99)];

	}

	public static void runGame() {

		do {
			discardPileCardNumber = Character.getNumericValue(discardPile.charAt(discardPile.length() - 1));
			clearScreen();
			checkWhoWon() ; 
			playerTurn();
			checkWhoWon() ; 
			clearScreen();
			checkWhoWon() ; 
			computerTurn();

		} while (playerDeckAmount > 0 && computerDeckAmount > 0);
		checkWhoWon() ; 
	}
	
	public static void checkWhoWon() {
		if(playerDeckAmount == 0) {
			System.out.println(playerName + " WON!");
		}
		if(computerDeckAmount == 0) {
			System.out.println(computerName + " WON!");
		}

	}

	public static void playerTurn() {

		// Display Screen
		System.out.println("\tYOUR TURN");
		System.out.println();
		System.out.println("Discard PILE: " + discardPile);
		System.out.println();
		System.out.println("YOUR DECK");

		// Prints out the players deck
		for (int i = 1; i <= playerDeckAmount; i++) {
			System.out.println(i + ": " + playerDeck[i - 1]);
		}
		System.out.println();
		System.out.println("0: PICK UP A CARD ");

		System.out.println();
		System.out.print("Pick a choice: ");
		cardChoice = input.nextInt();

		// Remember to validate the players choice
	
		
	
		if (cardChoice == 0) {

			playerDeck = Arrays.copyOf(playerDeck, playerDeck.length + 1);
			playerDeck[playerDeckAmount] = strings[getRandomNumber(99)];
			playerDeckAmount++;
			
			computerTurn();
			playerTurn() ; 

		}
		System.out.println();
		String card = playerDeck[cardChoice - 1] ;
		int cardIndex = card.length() -1 ; 
		int cardNum = Character.getNumericValue(card.charAt(cardIndex)); 
		
		
		// They pick A WILD CARD
		if (playerDeck[cardChoice - 1].charAt(0) == 'W') {
			clearScreen();
			discardPile = playerDeck[cardChoice - 1];
			// Switches the last card option with current card choice
			playerDeck[cardChoice - 1] = playerDeck[playerDeckAmount - 1];
			playerDeck = Arrays.copyOf(playerDeck, playerDeck.length - 1);
			playerDeckAmount--;
			System.out.println("\tWILD CARD!");
			slowText("Pick a new card!");
			clearScreen();
			playerTurn() ; 
		}

		if (playerDeck[cardChoice - 1].charAt(0) == discardPile.charAt(0) || cardNum == discardPileCardNumber) {
			// Changes the discard Pile
			discardPile = playerDeck[cardChoice - 1];
			// Switches the last card option with current card choice
			playerDeck[cardChoice - 1] = playerDeck[playerDeckAmount - 1];
			playerDeck = Arrays.copyOf(playerDeck, playerDeck.length - 1);
			playerDeckAmount--;

		} else {
			clearScreen() ; 
			slowText("Cant choose that") ; 
			playerTurn() ; 
		}

		

	}

	public static void computerTurn() {
		int cc = getRandomNumber(computerDeckAmount);
		String computerChoice = computerDeck[cc];

		int x = 0;
		x = 0;

		System.out.println("\tBob's TURN");
		System.out.println();
		System.out.println("Discard PILE: " + discardPile);
		System.out.println();
		System.out.println("Bob's DECK");

		// Loops through the computer deck to check if he needs to pick up a
		// card
		for (int i = 1; i <= computerDeck.length; i++) {

			if (computerDeck[i - 1].charAt(0) == discardPile.charAt(0) || computerDeck[i - 1].charAt(0) == 'W') {
				x++;
			}

			System.out.println(i + ": " + computerDeck[i - 1]);
		}

		// If 0 Then X never got incremented which means the computer can't play
		// a card!
		if (x == 0) {
			clearScreen();
			slowText("BOB TAKES A CARD");

			computerDeck = Arrays.copyOf(computerDeck, computerDeck.length + 1);
			computerDeck[computerDeckAmount] = strings[getRandomNumber(99)];
			computerDeckAmount++;
			x = 0;
			clearScreen();
			playerTurn();
		}

		// Otherwise he does have a card so he chooses his card
		else {
			for (int i = 1; i <= computerDeck.length; i++) {
				if (computerDeck[i - 1].charAt(0) == discardPile.charAt(0) || computerDeck[i - 1].charAt(0) == 'W') {
					computerChoice = computerDeck[i - 1];
				}

			}

			if (computerChoice.charAt(0) == 'W') {
				System.out.println("\tWILD CARD");
				slowText("Bob picks another card");

				for (int i = 0; i < computerDeckAmount; i++) {
					if (computerDeck[i].charAt(0) != 'W') {
						computerChoice = computerDeck[i];
						break;
					}
				}
			}
		}

		// Displays the choice of the computer
		System.out.println();
		System.out.print("Bob's choice: ");
		slowText(computerChoice);

		// Takes the choice out of the array and creates a new array
		computerDeck[cc] = computerDeck[computerDeckAmount - 1];
		computerDeckAmount--;
		computerDeck = Arrays.copyOf(computerDeck, computerDeck.length - 1);

		// Validate Computer Choice
		discardPile = computerChoice;
		x = 0;
	}

	public static int getRandomNumber(int x) {
		return rand.nextInt(x);
	}

	public static void clearScreen() {
		for (int x = 0; x <= 20; x++) {
			System.out.println();
		}

	}

	public static void slowText(String computerChoice) {

		for (int i = 0; i < computerChoice.length(); i++) {
			try {
				Thread.sleep(150);
			} catch (InterruptedException e) {

				e.printStackTrace();
			}
			System.out.print(computerChoice.charAt(i));

		}
	}

}



